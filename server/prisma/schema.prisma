generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id             String           @id @default(uuid())
  student_number String           @unique
  first_name     String
  middle_name    String?
  last_name      String
  age            Int
  birth_date     String
  gender         GENDER
  religion       String
  contact_number String
  address        Address?
  refreshToken   String?          @db.Text()
  email          String           @unique
  password       String
  profile_image  Profile_Image?
  emergency      Emergency?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  //! Only admin and professor can update this !!!
  school_year    String?
  school_college String?
  school_course  String?
  school_section String?
  role           ROLE             @default(STUDENT)
  type           TYPE             @default(REGULAR)
  SubjectsGrades SubjectsGrades[]
}

model Address {
  id          String  @id @default(uuid())
  Street_name String
  baranggay   String
  city        String
  region      String
  province    String
  postal_code String
  student_id  String  @unique
  Student     Student @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

model Profile_Image {
  id         String      @id @default(uuid())
  secure_url String
  image_url  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  student_id String      @unique
  student    Student     @relation(fields: [student_id], references: [id], onDelete: Cascade)
  Professor  Professor[]
}

model Emergency {
  id             String  @id @default(uuid())
  name           String
  contact_number String
  relation       String
  studentId      String  @unique
  student        Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Professor {
  id              String         @id @default(uuid())
  name            String
  username        String
  email           String
  password        String
  profileImage    Profile_Image? @relation(fields: [profile_ImageId], references: [id])
  profile_ImageId String?
}

// Holds all the grades and subjects from 1st to 4th year with 2 sems each
model SubjectsGrades {
  id        String   @id @default(uuid())
  Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?

  FirstYearGrades  FirstYearGrades[]
  SecondYearGrades SecondYearGrades[]
  ThirdYearGrades  ThirdYearGrades[]
  FourthYearGrades FourthYearGrades[]
}

model FirstYearGrades {
  id              String           @id @default(uuid())
  year            String           @default("FIRST YEAR")
  semester_grades SemesterGrades[]

  SubjectsGrades   SubjectsGrades? @relation(fields: [subjectsGradesId], references: [id], onDelete: Cascade)
  subjectsGradesId String?
}

model SecondYearGrades {
  id               String           @id @default(uuid())
  year             String           @default("SECOND YEAR")
  semester_grades  SemesterGrades[]
  SubjectsGrades   SubjectsGrades?  @relation(fields: [subjectsGradesId], references: [id], onDelete: Cascade)
  subjectsGradesId String?
}

model ThirdYearGrades {
  id               String           @id @default(uuid())
  year             String           @default("THIRD YEAR")
  semester_grades  SemesterGrades[]
  SubjectsGrades   SubjectsGrades?  @relation(fields: [subjectsGradesId], references: [id], onDelete: Cascade)
  subjectsGradesId String?
}

model FourthYearGrades {
  id               String           @id @default(uuid())
  year             String           @default("FOURTH YEAR")
  semester_grades  SemesterGrades[]
  SubjectsGrades   SubjectsGrades?  @relation(fields: [subjectsGradesId], references: [id], onDelete: Cascade)
  subjectsGradesId String?
}

model SemesterGrades {
  id                String             @id @default(uuid())
  semester          SEMESTER
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  subjects_enrolled SubjectsEnrolled[]

  FirstYearGrades    FirstYearGrades?  @relation(fields: [firstYearGradesId], references: [id], onDelete: Cascade)
  firstYearGradesId  String?
  SecondYearGrades   SecondYearGrades? @relation(fields: [secondYearGradesId], references: [id], onDelete: Cascade)
  secondYearGradesId String?
  ThirdYearGrades    ThirdYearGrades?  @relation(fields: [thirdYearGradesId], references: [id], onDelete: Cascade)
  thirdYearGradesId  String?
  FourthYearGrades   FourthYearGrades? @relation(fields: [fourthYearGradesId], references: [id], onDelete: Cascade)
  fourthYearGradesId String?
}

model SubjectsEnrolled {
  id               String          @id @default(uuid())
  grade            Float?
  code             String
  subject_name     String
  units            Int
  professor        String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  SemesterGrades   SemesterGrades? @relation(fields: [semesterGradesId], references: [id], onDelete: Cascade)
  semesterGradesId String?
}

model admin {
  id           String   @id @default(uuid())
  username     String
  name         String
  email        String
  password     String
  refreshToken String?  @db.Text()
  role         String   @default("ADMIN")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

enum GENDER {
  MALE
  FEMALE
  GAY
  LESBIAN
  UNKNOWN
}

enum TYPE {
  REGULAR
  IRREGULAR
}

enum ROLE {
  STUDENT
  ADMIN
  PROFESSOR
}

enum YEAR {
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum SEMESTER {
  FIRST
  SECOND
}
